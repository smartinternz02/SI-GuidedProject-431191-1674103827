# -*- coding: utf-8 -*-
"""GDP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VKGQ2gzGRmH0VyIv-N-QSs7cDFGfAdsA
"""

import numpy as np 
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
import pickle

world=pd.read_csv("countries of the world.csv",decimal=',')

world.info()
world.head()

world.value_counts('Region')

#world.value_counts('Region_label')

world.describe()

world.isnull().sum()

for col in world.columns.values:
    if world[col].isnull().sum() == 0:
        continue
    if col == 'Climate':
        guess_values = world.groupby('Region')['Climate'].apply(lambda x: x.mode().max())
    else:
        guess_values = world.groupby('Region')[col].median()
    for region in world['Region'].unique():
        world[col].loc[(world[col].isnull())&(world['Region']==region)] = guess_values[region]

LE = LabelEncoder()
world['Region_label'] = LE.fit_transform(world['Region'])
world['Climate_label'] = LE.fit_transform(world['Climate'])
world.head()

world['Region_label'].unique()

world['Region_label']

train, test = train_test_split(world, test_size=0.3, shuffle=True)
training_features = ['Population', 'Area (sq. mi.)',
       'Pop. Density (per sq. mi.)', 'Coastline (coast/area ratio)',
       'Net migration', 'Infant mortality (per 1000 births)',
       'Literacy (%)', 'Phones (per 1000)',
       'Arable (%)', 'Crops (%)', 'Other (%)', 'Birthrate',
       'Deathrate','Region_label' ,
       'Climate_label']
target = 'GDP ($ per capita)'
train_X = train[training_features]
train_Y = train[target]
test_X = test[training_features]
test_Y = test[target]

train, test = train_test_split(world, test_size=0.3, shuffle=True)
training_features = ['Population', 'Area (sq. mi.)',
       'Pop. Density (per sq. mi.)', 'Coastline (coast/area ratio)',
       'Net migration', 'Infant mortality (per 1000 births)',
       'Literacy (%)', 'Phones (per 1000)',
       'Arable (%)', 'Crops (%)', 'Other (%)', 'Birthrate',
       'Deathrate', 'Region_label',
       'Climate_label']
target = 'GDP ($ per capita)'
train_X = train[training_features]
train_Y = train[target]
test_X = test[training_features]
test_Y = test[target]

print(train_X.shape) 
print(train_Y.shape)
print(test_X.shape)
print(test_Y.shape)

model1 = LinearRegression()
model1.fit(train_X, train_Y)
train_pred_Y = model1.predict(train_X)
test_pred_Y = model1.predict(test_X)

print('Training Score : ',model1.score(train_X,train_Y))
#print(f'Test score : ',r2_score(test_pred_Y,test_Y))

model = RandomForestRegressor(n_estimators = 100,
                             max_depth = 6,
                             min_weight_fraction_leaf = 0.05,
                             max_features = 0.8,
                             random_state = 42)
model.fit(train_X, train_Y)
train_pred_Y = model.predict(train_X)
test_pred_Y = model.predict(test_X)

from sklearn.metrics import r2_score

print('Training Score : ',model1.score(train_X,train_Y))
print(f'Test score : ',r2_score(test_pred_Y,test_Y))

df = pd.DataFrame(columns = training_features)

df1=[[31056997.0,647500.0,48.0,0,23.06,163.07,36.0,3.2,12.13,0.22,87.65,46.6,20.34,0,0]]
model.predict(df1)

df=[[3581655,28748,	124.6,	1.26	,4.93	,21.52,86.5	,71.2	,21.09	,4.42	,74.49		,15.11,5.22,3,4]]
model.predict(df)

dfk=[[500000000.0,	3287263.0	,152.0,	2.00,	0.00,	5.00,	99.00,	1000.00,	60.0,	10.0,	30.00,	10.00,	5.00,	0.0,	0.0,]]
model.predict(df)

from joblib import Parallel, delayed
import joblib
  
  
# Save the model as a pickle in a file
joblib.dump(model1, 'Linear.pkl')
  
# Load the model from the file
knn_from_joblib = joblib.load('Linear.pkl')
  
# Use the loaded model to make predictions
knn_from_joblib.predict(dfk)

